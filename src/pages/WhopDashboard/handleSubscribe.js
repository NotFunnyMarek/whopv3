// src/pages/WhopDashboard/handleSubscribe.js

/**
 * Pokud je whopData.price ‚â§ 0, zavol√° handleJoinFree, jinak spust√≠ placen√Ω flow.
 *
 * @param {object} whopData              - data o Whopu (obsahuj√≠ id, price, currency, is_recurring, billing_period, slug)
 * @param {function} showConfirm         - funkce pro zobrazen√≠ confirm modalu (vrac√≠ promise)
 * @param {function} setOverlayVisible   - setter pro zobrazen√≠ fullscreen overlayu
 * @param {function} setOverlayFading    - setter pro fade‚Äêout efekt overlayu
 * @param {function} setMemberLoading    - setter pro stav naƒç√≠t√°n√≠ ‚Äûƒçlena‚Äú
 * @param {{width:number, height:number}} windowSize - objekt s rozmƒõry obrazovky
 * @param {function} navigate            - react‚Äêrouter funkce pro navigaci
 * @param {function} showNotification    - funkce pro zobrazen√≠ toast notifikace
 * @param {function} fetchCampaigns      - bound verze funkce, kter√° naƒçte kampanƒõ (bere whopId)
 * @param {function} setWhopData         - setter pro nov√© whopData
 */
export default async function handleSubscribe(
  whopData,
  showConfirm,
  setOverlayVisible,
  setOverlayFading,
  setMemberLoading,
  windowSize,
  navigate,
  showNotification,
  fetchCampaigns,
  setWhopData
) {
  if (!whopData) return;

  // Pokud je zdarma (price ‚â§ 0), p≈ôesmƒõrujeme do free‚Äêflow
  if (!whopData.price || parseFloat(whopData.price) <= 0) {
    const { default: joinFree } = await import("./handleJoinFree");
    await joinFree(
      whopData,
      setOverlayVisible,
      setOverlayFading,
      setMemberLoading,
      windowSize,
      navigate,
      showNotification,
      fetchCampaigns,
      setWhopData
    );
    return;
  }

  // Placen√Ω flow: nejprve potvrzen√≠ od u≈æivatele
  const price = parseFloat(whopData.price).toFixed(2);
  const period = whopData.is_recurring
    ? `opakuje se ka≈æd√Ωch ${whopData.billing_period}`
    : "jednor√°zovƒõ";
  const confirmMessage = `Tento Whop stoj√≠ ${whopData.currency}${price} ${period}.\nChcete pokraƒçovat?`;

  try {
    await showConfirm(confirmMessage);
  } catch {
    // U≈æivatel zru≈°il ‚Üí ukonƒç√≠me
    return;
  }

  // Zobraz√≠me fullscreen overlay
  setOverlayVisible(true);
  setOverlayFading(false);
  setMemberLoading(true);
  const resizeListener = () => setOverlayFading(false);
  window.addEventListener("resize", resizeListener);

  try {
    // Po≈°leme POST po≈æadavek na PHP
    const payload = { whop_id: whopData.id };
    const res = await fetch("https://app.byxbot.com/php/subscribe_whop.php", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(payload),
    });

    // Nejprve si vyzvedneme ƒçist√© textov√© tƒõlo (pro p≈ô√≠pad, ≈æe to nebude validn√≠ JSON)
    const rawText = await res.text();
    console.log("üî∏ [handleSubscribe] HTTP status:", res.status);
    console.log("üî∏ [handleSubscribe] Raw response text:", rawText);

    let data;
    try {
      data = JSON.parse(rawText);
    } catch (parseErr) {
      throw new Error(
        `Server nevr√°til platn√© JSON (HTTP ${res.status}):\n${rawText}`
      );
    }

    if (!res.ok || data.status !== "success") {
      // API vr√°tilo chybu (nap≈ô. 400 nebo 401, nebo {status:"error"})
      const msg = data.message || `Chyba HTTP ${res.status}`;
      showNotification({ type: "error", message: msg });
    } else {
      // √öspƒõ≈°n√© p≈ôihl√°≈°en√≠ ‚Üí refresh whopData + kampanƒõ
      const refresh = await fetch(
        `https://app.byxbot.com/php/get_whop.php?slug=${encodeURIComponent(
          whopData.slug
        )}`,
        { method: "GET", credentials: "include" }
      );
      const refreshed = await refresh.json();
      if (refresh.ok && refreshed.status === "success") {
        setWhopData(refreshed.data);
        await fetchCampaigns(refreshed.data.id);
        showNotification({ type: "success", message: data.message || "√öspƒõ≈°nƒõ p≈ôihl√°≈°eno." });
      }
    }
  } catch (err) {
    console.error("‚ö†Ô∏è [handleSubscribe] Chyba p≈ôi subscribe:", err);
    showNotification({ type: "error", message: err.message || "S√≠≈•ov√° chyba p≈ôi p≈ôihla≈°ov√°n√≠." });
  } finally {
    // Fade‚Äêout overlay po 2 sekund√°ch
    setTimeout(() => setOverlayFading(true), 2000);
    setMemberLoading(false);
    window.removeEventListener("resize", resizeListener);
  }
}
